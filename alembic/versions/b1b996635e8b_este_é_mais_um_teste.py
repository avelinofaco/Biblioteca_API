"""Este Ã© mais um teste

Revision ID: b1b996635e8b
Revises: 
Create Date: 2025-06-10 17:17:46.759465

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b1b996635e8b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('emprestimo')
    op.drop_table('usuario')
    op.drop_table('categoria')
    op.drop_table('autor')
    op.drop_table('livro_categoria')
    op.drop_table('livro')
    op.drop_table('livro_autor')
    op.drop_table('perfil_usuario')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('perfil_usuario',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('foto_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('profissao', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('interesses_literarios', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('livros_favoritos', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('data_criacao', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('usuario_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['usuario_id'], ['usuario.id'], name=op.f('perfil_usuario_usuario_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('perfil_usuario_pkey')),
    sa.UniqueConstraint('usuario_id', name=op.f('perfil_usuario_usuario_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('livro_autor',
    sa.Column('livro_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('autor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['autor_id'], ['autor.id'], name=op.f('livro_autor_autor_id_fkey')),
    sa.ForeignKeyConstraint(['livro_id'], ['livro.id'], name=op.f('livro_autor_livro_id_fkey')),
    sa.PrimaryKeyConstraint('livro_id', 'autor_id', name=op.f('livro_autor_pkey'))
    )
    op.create_table('livro',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('livro_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('titulo', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('isbn', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('ano_publicacao', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('editora', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('numero_paginas', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantidade_total', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantidade_disponivel', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('data_adicao', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='livro_pkey'),
    sa.UniqueConstraint('isbn', name='livro_isbn_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('livro_categoria',
    sa.Column('livro_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('categoria_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['categoria_id'], ['categoria.id'], name=op.f('livro_categoria_categoria_id_fkey')),
    sa.ForeignKeyConstraint(['livro_id'], ['livro.id'], name=op.f('livro_categoria_livro_id_fkey')),
    sa.PrimaryKeyConstraint('livro_id', 'categoria_id', name=op.f('livro_categoria_pkey'))
    )
    op.create_table('autor',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('sobrenome', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('data_nascimento', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('nacionalidade', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('biografia', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('data_criacao', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('autor_pkey'))
    )
    op.create_table('categoria',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('descricao', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ativa', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('data_criacao', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('categoria_pkey')),
    sa.UniqueConstraint('nome', name=op.f('categoria_nome_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('usuario',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('usuario_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('telefone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('endereco', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('data_cadastro', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('ativo', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='usuario_pkey'),
    sa.UniqueConstraint('email', name='usuario_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('emprestimo',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('data_emprestimo', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('data_devolucao_prevista', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('data_devolucao_real', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('ATIVO', 'DEVOLVIDO', 'ATRASADO', name='statusemprestimo'), autoincrement=False, nullable=False),
    sa.Column('observacoes', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('usuario_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('livro_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['livro_id'], ['livro.id'], name=op.f('emprestimo_livro_id_fkey')),
    sa.ForeignKeyConstraint(['usuario_id'], ['usuario.id'], name=op.f('emprestimo_usuario_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('emprestimo_pkey'))
    )
    # ### end Alembic commands ###
